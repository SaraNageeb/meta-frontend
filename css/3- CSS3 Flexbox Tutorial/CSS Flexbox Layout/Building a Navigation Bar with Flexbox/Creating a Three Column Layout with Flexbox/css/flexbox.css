/* ================================= 
  Media Queries
==================================== */

/*When the viewport or device is 769 pixels or wider, do this:*/
@media (min-width: 769px) {

    .main-header,
    .main-nav,
    .row {
        /*Now the name and main-nav elements inside 
        main-header are flex items.
        So when the view port is 769px or wider, 
        the site name and navigation will be on the same line.*/
        display: flex;
    }

    .main-header {
        flex-direction: column;
        align-items: center;
    }

    .col {
        /*
        So now each column takes up an equal amount of space inside the row.
        They each take up half the space.*/
        flex: 1 50%;
    }

    .row {
        /*
        So now when there isn't enough room on one line,
        a column will shift down to a second flex line.
        So once I refresh the browser, when the view port is 769 pixels or
        wider, the primary and secondary columns display on the same line.*/
        flex-wrap: wrap;
    }

    .secondary {
        order: -1;
    }

}

/*When the viewport or device is 1025px pixels or wider, do this:*/
@media (min-width: 1025px) {

    /* Now when the view port is 1025 pixels or wider,
    both the site name and navigation appear on the same line. */
    .main-header {
        flex-direction: row;

        /* Now the value space-between will align the name
    flex item to the left edge of the container, and
    the main-nav item to the right edge, and at any extra space between them. */
        justify-content: space-between;
    }

    /*
    Giving the columns a flex basis value of zero, displays the three columns
    on the same line when the view port or device is 1025 pixels or wider.
    So at this breakpoint, the columns no longer re-distribute the space
    inside the row by breaking on to a new line..*/
    .col {
        flex-basis: 0;
    }

    /* So the primary column holds the most important information on the page.
    So it should make a bigger statement by taking up more visual space on the page.
    So back inside the second media query,
    I'll give the primary column a larger flex grove value.
    So, I'll create a new rule that targets primary, and
    lets set the flex grow to 1.4.
    So now the primary column gets 1.4 the amount of space as the other two columns. */
    .primary{
        flex-grow: 1.4;
    }

}